---
title: "R Primer"
subtitle: "Department of Population Health Sciences Master's Program"
author: Kara McCormack
format:
  revealjs: 
    slide-number: true
    theme: default
    chalkboard: 
      buttons: false
    preview-links: auto
    logo: images/pop_health_logo.png
    css: styles.css
resources:
  - demo.pdf
---

## Welcome!

**A few notes**

-   Slides are available online: <insert link>
-   Email if there are specific tasks you want to be able to accomplish in R (kem81\@duke.edu)
-   Some of these slides are adapted from:
    -   [Thomas Mock's Intro to Tidyverse](https://www.youtube.com/watch?v=MKwyauo8nSI&ab_channel=ThomasMock)
    -   [Garrett Grolemund's Remaster the Tidyverse Workshop](https://github.com/rstudio-education/remaster-the-tidyverse)

## Introductions

-   Name
-   Where are you from?
-   Are you a morning person or a night person and why?

## Setup

1. Open RStudio.
2. Open the Exercises.Rmd file in RStudio
3. In the Console, type `install.packages("tidyverse")` and then Enter. 

4. Run the first code chunk (the one that starts with `# load libraries`) in the .Rmd file by clicking on the green arrow at the top right of the chunk. 


## Programming is a Learned Skill!

```{r}
#| eval: false
library(babynames)
library(tidyverse)
```

-   Practice & patience.
-   Small wins turn into large success.
-   Goal of the primer is to learn to use RStudio to explore data and get help when things don't work (it will happen often!)

## Outline

-   Introduction to R
-   Introduction to Rstudio
-   Transform Data
-   Plot Data
-   Model Data
-   Other

# Introduction to R

## Introducing R

-   Open-source programming language and software environment for statistical computing and graphics
-   Created in 1996
-   Created by **R**oss Ihaka and **R**obert Gentleman (University of Auckland, New Zealand)
-   Currently supported by R Foundation for Statistical Computing (Vienna, Austria)
-   More information on the history of R at https://www.R-project.org

## Intro to R

-   Math
-   Assignments
-   Functions
-   Load and installing packages

## Math with R

::: {style="font-size: 1.8em; text-align: center"}
```{r}
#| echo: true
# some math
5 + 7
```

```{r}
#| echo: true
3.14*3
```

- Run code by highlighting code and then Cmd+Enter (for Mac) or Ctrl+Enter (for PC). 

- In .Rmd files, can also run entire chunks with green arrow. 
- Add comments with the `#`

:::

## R is a functional language

:::{.incremental}
- Values: 3, "California", "2015-03-07"

- Objects: x <- [c(]{style="color:#cc0000"}5/6, 0.83, 7[)]{style="color:#cc0000"}
  - To put multiple values into an object, use [c()]{style="color:#cc0000"}, stands for "combine"
- Functions: [round]{style="color:#cc0000"}(x, digits = 3)
  - name without quotes
  - followed by () to run the function
  - digits = an argument of function
:::

::: notes
possible homework about data structures:
https://swcarpentry.github.io/r-novice-inflammation/13-supp-data-structures/
:::

## Example

::: {style="font-size: 1.8em; text-align: center"}
```{r}
#| echo: true
x <- c(7/8, 2.5434, 7)

round(x, digits = 3)
```
:::

## Example

Vectorization

::: {style="font-size: 1.8em; text-align: center"}
```{r}
#| echo: true
a <- c(1, 2, 3)

b <- c(3, 4, 5)
```

```{r}
#| echo: true
a + b

a * b
```
:::

## R symbols

::: columns
::: {.column width="50%"}

See

- `<-`
- `%>%`
- `==`
- `=`
:::

::: {.column width="50%"}

Say

- Gets
- And then
- Compare
- Assign

:::
:::

## Example

::: {style="font-size: 1.8em; text-align: center"}
```{r}
#| echo: true
c <- 1:5
print(c)
d <- c(0, 1, 7, 7, 7)
print(d)
c < d
```
:::

# R Packages

## Functions and packages

![](images/f5.png)
## Functions and packages

![](images/f6.png)
::: notes
An R package is a collection of functions, data, and documentation that extends the capabilities of base R.

:::
# Introduction to RStudio

## Intro to RStudio

::: {style="font-size: 0.8em"}

-   RStudio is an IDE (Integrated Development Environment)
-   A place to write
    -   Console
    -   R Scripts
    -   R Markdown
-   A place to open things
    -   Open plots, data, R (.R) or R Markdown (.Rmd) files
-   A place for projects
    -   Self-contained structure
    -   Consistent/easy pathing
    -   Keep relevant files/code together with output

:::

::: notes
Speaker notes go here.
:::

## RStudio Interface

![](images/f4.png)

# Tidyverse

## Tidyverse


::: {style="fig-width: 0.8em"}
![](images/f8.png)
:::



::: notes
Packages in the tidyverse share a common philosophy of data, and are designed to work together naturally. 

make figure smaller!
:::

## Tidyverse

tidyverse.org

![](images/tidy.png)
## Using packages

::: {style="font-size: 1.8em; text-align: center"}
```{r}
#| echo: true
#| eval: false
install.packages("foo")
# downloads files to computer
# only need to do this 1x per computer!
```

:::

## Tidyverse packages

::: columns
::: {.column width="50%"}

```{r}
#| echo: true
#| eval: false
install.packages("ggplot2") 		
install.packages("dplyr")
install.packages("tidyr")			
install.packages("readr")
install.packages("purrr")			
install.packages("tibble")
install.packages("hms")				
install.packages("stringr")
install.packages("lubridate")	
install.packages("forcats")
```

:::

::: {.column width="50%"}

```{r}
#| echo: true
#| eval: false
install.packages("DBI")				
install.packages("haven")
install.packages("httr")				
install.packages("jsonlite")
install.packages("readxl")		
install.packages("rvest")
install.packages("xml2")				
install.packages("modelr")
install.packages("broom")
```

:::

:::


## Tidyverse

An R package that serves as a shortcut for installing and loading the components of the tidyverse. 

::: {style="font-size: 1.8em; text-align: center"}

```{r}
#| echo: true
#| eval: false
install.packages("tidyverse")	
```


:::

## Programming pattern


![](images/tidyprogram.png)

## Tidy data

- Main characteristics of tidy data

  - each variable is a column
  - each observation is a row
  - each value is a different cell
  

![](images/tidydata.png)
# Reading in data

## Reading in data

 - show option of import dataset
 - show option of read_csv
 - mention working directory
 - `getwd()` shows working directory
 
# Transform data with dplyr

## Isolating data of interest

::: {style="font-size: 1.4em"}

[select()]{style="color:darkcyan"} - extract [variables]{style="color:darkcyan"} (columns)

[filter()]{style="color:darkcyan"} - extract [cases]{style="color:darkcyan"} (rows)

[arrange()]{style="color:darkcyan"} - reorder [cases]{style="color:darkcyan"}

:::


## select()

Extract columns by name.

::: {style="font-size: 1.4em"}

```{r}
#| echo: true
#| eval: false

select(.data, <column(s)>)

# e.g.

# data %>%
#   select(column1, column2, column3)
```

:::

- no need to specify data again within the `select` function here, because data is being "piped" into the function


## select(): example

```{r}
#| echo: false
#| eval: true
library(babynames)
library(tidyverse)
```

::: {style="font-size: 1.4em"}

```{r}
#| echo: true
#| eval: true

select(babynames, name, prop)
```

:::

## select(): example with pipe
The following code uses the pipe and does the same thing as previous slide. 

::: {style="font-size: 1.4em"}

```{r}
#| echo: true
#| eval: true

babynames %>%
  select(name, prop)
```

:::
 - R and RStudio will automatically tab indent the line following the pipe
 - helps for readability of code (for yourself and others!)
 
## select(): helper functions

Can also select variables with helper functions.

::: {style="font-size: 1.4em"}

```{r}
#| echo: true
#| eval: true

mpg %>%
  select(cty:class)

```

:::

## select(): helper functions

::: {style="font-size: 1.4em"}
```{r}
#| echo: true
#| eval: true
mpg %>%
  select(-c(cty, hwy))
```
:::

## select(): helper functions

::: {style="font-size: 1.4em"}
```{r}
#| echo: true
#| eval: true
mpg %>%
  select(starts_with("c"))
```
:::

## select(): helper functions

::: {style="font-size: 1.4em"}
```{r}
#| echo: true
#| eval: true
mpg %>%
  select(ends_with("y"))
```
:::

## filter

Extract rows that meet logical criteria

::: {style="font-size: 1.4em"}
```{r}
#| echo: true
#| eval: false
data %>%
  filter(<criteria>)
```
:::

- Criteria can be one or more logical tests. Returns each row for which the test is TRUE. 

- Takes in a data frame or tibble and returns a data frame / tibble. 

::: notes
tribble is used to create a row-wise, readable tibble. useful for creating small tables of data. 
a tibble is similar to a data frame. two key differences are 1) how they are printed and 2) . When a tibble is printed, it shows the first ten rows and all the columns that can be fit on a screen
:::

## filter(): example

::: {style="font-size: 1.4em"}
```{r}
#| echo: true
#| eval: true
babynames %>%
  filter(name == "Garrett")
```
:::

- `==` tests whether two things are equal or not. If yes, returns `TRUE`, if not, returns `FALSE`. 

- Note: Be sure to use `==` as a logical criteria and not `=` (not trying to assign a value to a variable). 

## Logical tests

::: {style="font-size: 1.4em"}

```{r}
#| echo: true
#| eval: false
x < y      # less than
x > y      # greater than
x == y     # equal to
x <= y     # less than or equal to
x >= y     # greater than or equal to
x != y     # not equal to
x %in% y   # group membership
is.na(x)   # is NA
!is.na(x)  # is not NA
```

:::

## Two common mistakes

1. Using `=` instead of `==`

::: {style="font-size: 1.4em"}

```{r}
#| echo: true
#| eval: false

babynames %>%
  filter(name = "Sea")   # incorrect

babynames %>%
  filter(name == "Sea")  # correct
```

:::

2. Forgetting quotes

::: {style="font-size: 1.4em"}

```{r}
#| echo: true
#| eval: false

babynames %>%
  filter(name = Sea)     # incorrect

babynames %>%
  filter(name == "Sea")  # correct
```

:::

## fiter()

::: {style="font-size: 1.4em"}

```{r}
#| echo: true
#| eval: true

babynames %>%
  filter(name == "Garrett", year == 1880)
```

:::

## filter()

::: {style="font-size: 1.4em"}

```{r}
#| echo: true
#| eval: true

babynames %>%
  filter(name == "Garrett" & year == 1880)
```

:::

## Boolean operators

::: {style="font-size: 1.4em"}

```{r}
#| echo: true
#| eval: false

a & b         # and
a | b         # or
xor(a, b)     # exclusive or (if two values same, returns F)
!a            # not
( )           # for grouping tests; & evaluates before |
```

:::

## Boolean operators: example

::: {style="font-size: 1.4em"}

```{r}
#| echo: true
#| eval: true

x <- 2.5
x >=2 & x < 3   # both conditions are true
```

:::

## filter() with conditions

::: {style="font-size: 1.4em"}

```{r}
#| echo: true
#| eval: true

babynames %>%
  filter(name =="Sue", sex == "M")
```

:::

## filter() with conditions

parentheses matter!

::: {style="font-size: 1.4em"}

```{r}
#| echo: true
#| eval: true

babynames %>%
  filter((n==5 | n==6) & year == 1880)
```
:::
 
## More ommon mistakes

3. Collapsing multiple tests into one

::: {style="font-size: 1.2em"}

```{r}
#| echo: true
#| eval: false

babynames %>%
  filter(10 < n < 20) # throws an error

babynames %>%
  filter(10 < n, n < 20) # correct
```

:::

## More Common Mistakes

4. Stringing together multiple tests, when you could use `%in%`

::: {style="font-size: 1.2em"}

```{r}
#| echo: true
#| eval: false

# will run, just not efficient
babynames %>%
  filter(n == 5 | n == 6 | n == 7 | n == 8) 

# better
babynames %>%
  filter(n %in% c(5, 6, 7, 8)) 

# or, alternatively:
vec <- 5:8
babynames %>%
  filter(n %in% vec)
```

:::

## arrange()
Order data from smallest to largest values

::: {style="font-size: 1.2em"}

```{r}
#| echo: true
#| eval: true

babynames %>%
  arrange(n)
```

:::

## arrange()
Order data from largest to smallest values

::: {style="font-size: 1.2em"}

```{r}
#| echo: true
#| eval: true

babynames %>%
  arrange(desc(n))
```

:::

## Performing multiple steps

::: {style="font-size: 1.2em"}
```{r}
#| echo: true
#| eval: true

boys_2015 <- babynames %>% filter(year == 2015, sex == "M")
boys_2015 <- boys_2015 %>% select(name, n)
boys_2015 <- boys_2015 %>% arrange(desc(n))
boys_2015
```
:::

## Performing multiple steps: nesting functions
Not recommended - gets quite confusing

::: {style="font-size: 1.2em"}

```{r}
#| echo: true
#| eval: true

arrange(select(filter(babynames, year == 2015, 
  sex == "M"), name, n), desc(n))
```

:::

## Performing multiple steps: piping each step
  - Recommended!
  - Tab indentation allows for easily readable code
  - Easier to debug

::: {style="font-size: 1.2em"}

```{r}
#| echo: true
#| eval: false

babynames %>% 
  filter(year == 2015, sex == "M") %>%
  select(name, n) %>%
  arrange(desc(n))
```

:::

## What if we wanted to visualize?
How popular was the name "Garrett" for males over time?


```{r}
#| echo: true
#| eval: true
#| fig-width: 7
#| fig-height: 4

babynames %>% 
  filter(name == "Garrett", sex == "M") %>%
  select(year, prop) %>%
  ggplot() +
    geom_line(mapping = aes(year, prop))
```


## Plotting groups

Plotting the popularity of the name "Michael" over time. 

Note that we did not filter on sex. 


```{r}
#| echo: true
#| eval: true
#| fig-width: 7
#| fig-height: 4
babynames %>% 
  filter(name == "Michael") %>%
  ggplot() +
    geom_point(mapping = aes(year, prop))
```


## Plotting groups

```{r}
#| echo: true
#| eval: true
#| fig-width: 7
#| fig-height: 4.5

babynames %>% 
  filter(name == "Michael") %>%
  ggplot() +
    geom_line(mapping = aes(year, prop))
```

## Plotting groups, adding in color

```{r}
#| echo: true
#| eval: true
#| fig-width: 7
#| fig-height: 4.5

babynames %>% 
  filter(name == "Michael") %>%
  ggplot() +
    geom_line(mapping = aes(year, prop, color = sex))
```

## Plotting with facet_wrap()

```{r}
#| echo: true
#| eval: true
#| fig-width: 9
#| fig-height: 4.5

babynames %>% 
  filter(name == "Michael") %>%
  ggplot() +
    geom_line(mapping = aes(year, prop)) +
    facet_wrap(~sex)
```

# summarize()

## summarize()
Compute table of summaries. 
Takes a vector as input, returns single value as output. 
See summary functions on cheat sheet!

::: {style="font-size: 1.2em"}
```{r}
#| echo: true
#| eval: true
babynames %>%
  head(3) # look at first three rows

babynames %>%
  summarize(total = sum(n), max = max(n))
```

:::

## n()
The number of rows in a dataset/group. 
::: {style="font-size: 1.2em"}
```{r}
#| echo: true
#| eval: true
babynames %>%
  head(3) # look at first three rows

babynames %>%
  summarize(n = n())
```
:::

## n_distinct()

The number of distinct values in a variable. 

::: {style="font-size: 1.2em"}
```{r}
#| echo: true
#| eval: true
babynames %>%
  head(3) # look at first three rows

babynames %>%
  summarize(n = n(), nname = n_distinct(name))
```
:::

## How to define name popularity?

A name is popular if: 

1. Sums - a large number of children have the same name when you sum across years. 

## Name popularity example: Khaleesi

::: {style="font-size: 1.2em"}
```{r}
#| echo: true
#| eval: true
babynames %>%
  filter(name == "Khaleesi" & sex == "F")
```
:::


## Name popularity example: Khaleesi

::: {style="font-size: 1.2em"}
```{r}
#| echo: true
#| eval: true
babynames %>%
  filter(name == "Khaleesi" & sex == "F") %>%
  summarize(total = sum(n))
```

:::

Question: Can we do this for each name? 

# Grouping cases


## grouping

# ggplot2()

## Visualize data with ggplot2

## mappings

## facets

## geoms



# mutate()

## Create new variables with mutate()

# Communicate results with R Markdown

# Modeling data

## broom

## multivariate regression
